/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as appRouteImport } from './routes/(app)/route'
import { Route as appIndexImport } from './routes/(app)/index'
import { Route as authSignUpImport } from './routes/(auth)/sign-up'
import { Route as authSignInImport } from './routes/(auth)/sign-in'
import { Route as appScheduleIndexImport } from './routes/(app)/schedule/index'
import { Route as appSchedulePastImport } from './routes/(app)/schedule/past'

// Create/Update Routes

const appRouteRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const appIndexRoute = appIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)

const authSignUpRoute = authSignUpImport.update({
  id: '/(auth)/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const authSignInRoute = authSignInImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const appScheduleIndexRoute = appScheduleIndexImport.update({
  id: '/schedule/',
  path: '/schedule/',
  getParentRoute: () => appRouteRoute,
} as any)

const appSchedulePastRoute = appSchedulePastImport.update({
  id: '/schedule/past',
  path: '/schedule/past',
  getParentRoute: () => appRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpImport
      parentRoute: typeof rootRoute
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexImport
      parentRoute: typeof appRouteImport
    }
    '/(app)/schedule/past': {
      id: '/(app)/schedule/past'
      path: '/schedule/past'
      fullPath: '/schedule/past'
      preLoaderRoute: typeof appSchedulePastImport
      parentRoute: typeof appRouteImport
    }
    '/(app)/schedule/': {
      id: '/(app)/schedule/'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof appScheduleIndexImport
      parentRoute: typeof appRouteImport
    }
  }
}

// Create and export the route tree

interface appRouteRouteChildren {
  appIndexRoute: typeof appIndexRoute
  appSchedulePastRoute: typeof appSchedulePastRoute
  appScheduleIndexRoute: typeof appScheduleIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appIndexRoute: appIndexRoute,
  appSchedulePastRoute: appSchedulePastRoute,
  appScheduleIndexRoute: appScheduleIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/schedule/past': typeof appSchedulePastRoute
  '/schedule': typeof appScheduleIndexRoute
}

export interface FileRoutesByTo {
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/': typeof appIndexRoute
  '/schedule/past': typeof appSchedulePastRoute
  '/schedule': typeof appScheduleIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(app)/': typeof appIndexRoute
  '/(app)/schedule/past': typeof appSchedulePastRoute
  '/(app)/schedule/': typeof appScheduleIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign-in' | '/sign-up' | '/schedule/past' | '/schedule'
  fileRoutesByTo: FileRoutesByTo
  to: '/sign-in' | '/sign-up' | '/' | '/schedule/past' | '/schedule'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(app)/'
    | '/(app)/schedule/past'
    | '/(app)/schedule/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
}

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(app)",
        "/(auth)/sign-in",
        "/(auth)/sign-up"
      ]
    },
    "/(app)": {
      "filePath": "(app)/route.tsx",
      "children": [
        "/(app)/",
        "/(app)/schedule/past",
        "/(app)/schedule/"
      ]
    },
    "/(auth)/sign-in": {
      "filePath": "(auth)/sign-in.tsx"
    },
    "/(auth)/sign-up": {
      "filePath": "(auth)/sign-up.tsx"
    },
    "/(app)/": {
      "filePath": "(app)/index.tsx",
      "parent": "/(app)"
    },
    "/(app)/schedule/past": {
      "filePath": "(app)/schedule/past.tsx",
      "parent": "/(app)"
    },
    "/(app)/schedule/": {
      "filePath": "(app)/schedule/index.tsx",
      "parent": "/(app)"
    }
  }
}
ROUTE_MANIFEST_END */
