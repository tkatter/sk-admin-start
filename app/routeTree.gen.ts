/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as appIndexImport } from './routes/(app)/index'
import { Route as authSignUpImport } from './routes/(auth)/sign-up'
import { Route as authSignInImport } from './routes/(auth)/sign-in'

// Create/Update Routes

const appIndexRoute = appIndexImport.update({
  id: '/(app)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authSignUpRoute = authSignUpImport.update({
  id: '/(auth)/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const authSignInRoute = authSignInImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpImport
      parentRoute: typeof rootRoute
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/': typeof appIndexRoute
}

export interface FileRoutesByTo {
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/': typeof appIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(app)/': typeof appIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/sign-in' | '/sign-up' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/sign-in' | '/sign-up' | '/'
  id: '__root__' | '/(auth)/sign-in' | '/(auth)/sign-up' | '/(app)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
  appIndexRoute: typeof appIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
  appIndexRoute: appIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)/sign-in",
        "/(auth)/sign-up",
        "/(app)/"
      ]
    },
    "/(auth)/sign-in": {
      "filePath": "(auth)/sign-in.tsx"
    },
    "/(auth)/sign-up": {
      "filePath": "(auth)/sign-up.tsx"
    },
    "/(app)/": {
      "filePath": "(app)/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
